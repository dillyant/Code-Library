if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"*****************************************************  
"                                                    *
"       vim-plug配置                                 *  
"                                                    *
"*****************************************************  

call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/Tagbar'
Plug 'vim-scripts/OmniCppComplete'

"Plugin 'The-NERD-Commenter'
"Plugin 'taglist.vim'
"Plugin 'ctrlp.vim'
"Plugin 'bufexplorer.zip'
"Plugin 'winmanager'
"Plugin 'echofunc.vim'
"Plugin 'godlygeek/tabular'
"Plugin 'Valloric/YouCompleteMe'
call plug#end()

"*****************************************************  
"                                                    *
"       general配置                                  *  
"                                                    *
"*****************************************************  


" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" If "mapleader" is not set or empty, a backslash is used  instead.
let mapleader = ","
let g:mapleader = ","

" 配色方案 
set t_Co=256
" Switch syntax highlighting on, when the terminal has colors
syntax enable


"打开man手册，分割窗口 <leader>K
runtime! ftplugin/man.vim

"允许未保存切换buffer 隐藏buff
set hidden

"可以在buffer的任何地方使用鼠标
"set mouse=a
"set selection=exclusive
"set selectmode=mouse,key 

"复制之前的缩进
set copyindent

":substitute" flag 'g' is default on
set gdefault

" Set to auto read when a file is changed from the outside
set autoread

"Write the contents of the file, if it has been modified
set autowrite

"显示行号
set number

"历史记录数
set history=1000

"Always show current position
set ruler

"show (partial) command keys in the status line
set showcmd

"Height of the command bar
set cmdheight=2

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=b,s,<,>,[,],h,l

"带有如下符号的单词不要换行分割
set iskeyword=@,48-57,_

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" no visualbell
set novisualbell

"匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1

"匹配括号的规则，增加针对html的<>
set matchpairs=(:),{:},[:],<:>

" No annoying sound on errors
set noerrorbells
set novisualbell

" Add a bit extra margin to the left
set foldcolumn=1

"在处理未保存或只读文件的时候，弹出确认
set confirm

"设置光标高亮显示
"set cursorline
"set cursorcolumn

"光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3 

" Always show the status line
set laststatus=2
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}:%{&fenc!=''?&fenc:&enc}]\ [TYPE=%Y]\ [ROW=%03l/%L(%p%%)]\ [COL=%03v]

"Set utf8 as standard encoding 
"en_US as the standard language

set encoding=utf-8        "vim 内部使用的编码方式
set termencoding=utf-8    "用于屏幕显示
set langmenu=zh_CN.UTF-8
set helplang=cn
set fileformats=unix,dos
set fenc=utf-8
"cp936 = gb2312
set fencs=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1 

" Use spaces instead of tabs, 1 tab == 4 spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab

" Linebreak on 100 characters
set lbr
set textwidth=100
set formatoptions+=t

"自动换行
set wrap
set cindent
set autoindent
set smartindent 

"字符间插入的像素数目
set linespace=0

"增强模式中的命令行自动完成操作
set wildmenu

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

set foldenable           " enable folden
set foldmethod=manual    " manual : Folds are created manually.
                         " indent : Lines with equal indent form a fold.
                         " expr   : ‘foldexpr’ gives the fold level of a line.
                         " marker : Markers are used to specify folds.
                         " syntax : Syntax highlighting items specify folds.
                         " diff   : Fold text that is not changed.
set foldopen=block,hor,mark,percent,quickfix,tag " what movements to open folds on
"set foldclose=all

" use space to folden
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal! g`\"" |
			\ endif

" Remember info about open buffers on close
set viminfo^=%

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Mappings {
   map <F12> ggVGg?
   map <F4> :!ctags -R --fields=+iaS --c++-kinds=+p --extra=+q<cr>

   " Make Arrow Keys Useful {
      "map <left> <ESC>:NERDTreeToggle<RETURN>
      "map <right> <ESC>:Tlist<RETURN>
   " }
" }



"*****************************************************  
"                                                    *
"       colorscheme  goyo limelight
"                                                    *
"*****************************************************  
colorscheme molokai 
"limelight
""<Leader>l触发limelight功能
nmap <Leader>l :Goyo<CR>
xmap <Leader>l :Goyo<CR>
"进入goyo模式后自动触发limelight,退出后则关闭
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

"*****************************************************  
"                                                    *
"       tags配置                                     *  
"                                                    *
"*****************************************************  
"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --if0=yes --languages=c,c++ --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q -R -f ~/.vim/systags /usr/include /usr/local/include

"//;不可省略 表示当前目录不存在tags，则在父目录中寻找
set tags=tags; 
set tags+=/root/.vim/systags
set path+=.,/usr/include/,/usr/local/include,,/root/yanwf/svn/gapnet/gapnet_v3.0/**
"*****************************************************  
"                                                    *
"       Cscope配置                                   *  
"                                                    *
"*****************************************************  
if has("cscope")
	set csprg=/usr/bin/cscope " 指定用来执行cscope的命令
	set csto=1 " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
	set cst " 同时搜索cscope数据库和标签文件
    "set cscopequickfix=s-,c-,d-,i-,t-,e- " 使用QuickFix窗口来显示cscope查找结果
	set nocsverb
	if filereadable("cscope.out") " 若当前目录下存在cscope数据库，添加该数据库到vim
		cs add cscope.out
	elseif $CSCOPE_DB != "" " 否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim
		cs add $CSCOPE_DB
	endif
	set csverb
endif

nmap <leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <leader>a :cs find a <C-R>=expand("<cword>")<CR><CR>


nmap <leader>hs :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>hg :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>hc :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ht :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>he :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>hf :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>hi :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>hd :scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ha :scs find a <C-R>=expand("<cword>")<CR><CR>



nmap <leader>vs :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vg :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vc :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vt :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ve :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vf :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>vi :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>vd :vert scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <leader>va :vert scs find a <C-R>=expand("<cword>")<CR><CR>


"*****************************************************  
"                                                    *
"       QuickFix 配置                                *  
"                                                    *
"*****************************************************  
" 按下F5，执行make clean
map <F5> :make<CR><CR><CR> :copen<CR><CR>
" 按下F6，光标移到上一个错误所在的行
map <F6> :cp<CR>
" 按下F7，光标移到下一个错误所在的行
map <F7> :cn<CR>
" 按下F8，执行make编译程序，并打开quickfix窗口，显示编译信息
map <F8> :make clean<CR><CR><CR>

"*****************************************************  
"                                                    *
"       The-NERD-Commenter配置                       *  
"                                                    *
"*****************************************************  
"快速批量注释,方便好用 The-NERD-Commenter
"<leader>cc 注释当前选中文本
"<leader>cu 取消选中文本块的注释。

"*****************************************************  
"                                                    *
"      The-NERD-tree配置                             *  
"                                                    *
"*****************************************************  
"nmap <leader>nt :NERDTree<cr>:set rnu<cr>
nmap <leader>nt :NERDTree<cr>
let NERDTreeChDirMode=2
let NERDTreeWinSize=35
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeHighlightCursorline=1
let NERDTreeWinPos="left"
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\~$', '\.swp$']
" Automatically open a NERDTree if no files where specified
autocmd vimenter * if !argc() | NERDTree | endif
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end


"*****************************************************  
"                                                    *
"       taglist配置                                  *  
"                                                    *
"*****************************************************  
"<leader>tl 打开taglist窗口
nmap <leader>tl :Tlist<CR><c-l>                
let Tlist_Ctags_Cmd="ctags"
let Tlist_Show_One_File        = 1             " 只显示当前文件的tags
let Tlist_File_Fold_Auto_Close = 1             " 非当前文件，自动折叠
let Tlist_Use_Right_Window     = 1             " 在右侧窗口中显示
let Tlist_Sort_Type = "name"                  "tems in tags sorted by name 
let Tlist_Exit_OnlyWindow      = 1             " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Process_File_Always  = 1             "实时更新tags
let Tlist_Inc_Winwidth = 0                     "terminal/console mode
let Tlist_Show_Menu=1
let Tlist_Use_SingleClick=0
let Tlist_Process_File_Always=1
let Tlist_GainFocus_On_ToggleOpen = 1

"*****************************************************  
"                                                    *
"       tagbar配置                                   *  
"                                                    *
"*****************************************************  
"<leader>tb 打开tagbar窗口
nmap <leader>tb :TagbarToggle<CR>  
let g:tarbar_width=35
let g:tagbar_autofocus = 1

"*****************************************************  
"                                                    *
"       a.vim配置                                    *  
"                                                    *
"*****************************************************  
"切换源文件头文件 a.vim
":A 在同一tab切换源文件/头文件
":AV 竖向切割窗口,打开对应的源文件/头文件
":AS 横向切割窗口,打开对应的源文件/头文件

"*****************************************************  
"                                                    *
"   快速移动EasyMotion配置                           *  
"                                                    *
"*****************************************************  
"help easymotion <leader><leader> w

"*****************************************************  
"                                                    *
"       airline配置                                 *  
"                                                    *
"*****************************************************  
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'


"*****************************************************  
"                                                    *
"       echofunc配置                                 *  
"                                                    *
"*****************************************************  
let g:EchoFuncKeyNext='<leader>n'
let g:EchoFuncKeyPrev='<leader>p'
let g:EchoFuncAutoStartBalloonDeclaration = 1

"*****************************************************  
"                                                    *
"        ctrlp配置                                   *  
"                                                    *
"*****************************************************  
set wildignore+=*.o,*~,*.pyc,.git/*,.hg/*,.svn/*
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.png,*.jpg,*.jpeg,*.gif " MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

"*****************************************************  
"                                                    *
"        winmanager配置                              *  
"                                                    *
"*****************************************************  
"快捷键打开WinManager  在fileexplorer窗口中按<c-n>可以切换到bufexplorer窗口。
nmap <leader>wm :WMToggle<cr>
let g:winManagerWindowLayout="TagList|FileExplorer,BufExplorer" 
let g:persistentBehaviour=0 "所有编辑文件都关闭，退出vim

"*****************************************************  
"                                                    *
"        omnicppcomplete配置                         *  
"                                                    *
"*****************************************************  
set completeopt=menu,menuone,longest  
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_GlobalScopeSearch=1 " enable the global scope search
let OmniCpp_DisplayMode=1 " Class scope completion mode: always show all members
let OmniCpp_DefaultNamespaces=["std"]
let OmniCpp_ShowScopeInAbbr=1 " show scope in abbreviation and remove the last column
let OmniCpp_ShowAccess=1

"*****************************************************  
"                                                    *
"           YouCompleteMe配置                        *  
"                                                    *
"*****************************************************  
"配置默认的ycm_extra_conf.py  
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'   
   
"按,jd 会跳转到定义  
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>     
   
"打开vim时不再询问是否加载ycm_extra_conf.py配置  
"let g:ycm_confirm_extra_conf=0     
   
"使用ctags生成的tags文件  
"let g:ycm_collect_identifiers_from_tag_files = 1   
