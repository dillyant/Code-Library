if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"*****************************************************  
"                                                    *
"       vim-plug配置                                 *  
"                                                    *
"*****************************************************  

call plug#begin('~/.vim/plugged')

Plug 'tomasr/molokai'
"树形目录
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-commentary'

Plug 'vim-scripts/a.vim'

Plug 'vim-scripts/Tagbar'

"代码补全
Plug 'Shougo/neocomplete.vim'  "+lua
Plug 'vim-scripts/OmniCppComplete'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'

"Plug 'Shougo/deoplete.nvim' "+python3

Plug 'vim-scripts/taglist.vim'

Plug 'vim-scripts/c.vim'

Plug 'vim-scripts/echofunc.vim'

Plug 'ctrlpvim/ctrlp.vim'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

"代码检测
Plug 'dense-analysis/ale'
"代码对齐
Plug 'godlygeek/tabular'
"格式化
Plug 'junegunn/vim-easy-align'
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
"快速跳转
Plug 'justinmk/vim-sneak'
"快速选择
Plug 'terryma/vim-expand-region'
map K <Plug>(expand_region_expand)
map J <Plug>(expand_region_shrink)
"版本控制
Plug 'mhinz/vim-signify'
"多光标
Plug 'terryma/vim-multiple-cursors'
call plug#end()

"*****************************************************  
"                                                    *
"       general配置                                  *  
"                                                    *
"*****************************************************  
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" If "mapleader" is not set or empty, a backslash is used  instead.
let mapleader = ","
let g:mapleader = ","

" 配色方案 
colorscheme molokai 
set t_Co=256

" Switch syntax highlighting on, when the terminal has colors
syntax enable

"打开man手册，分割窗口 <leader>K
runtime! ftplugin/man.vim

"允许未保存切换buffer 隐藏buff
set hidden

"可以在buffer的任何地方使用鼠标
"set mouse=a
"set selection=exclusive
"set selectmode=mouse,key 

"复制之前的缩进
set copyindent

"Threshold for reporting number of lines changed
set report=0

" Set to auto read when a file is changed from the outside
set autoread

"Write the contents of the file, if it has been modified
set autowrite

"显示行号
set number
"set relativenumber

set ttyfast

"历史记录数
set history=1000

"Always show current position
set ruler

"show (partial) command keys in the status line
set showcmd

"Height of the command bar
set cmdheight=2

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=b,s,<,>,[,],h,l

"带有如下符号的单词不要换行分割
set iskeyword+=$,@,%,#

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

"匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1

"匹配括号的规则，增加针对html的<>
set matchpairs=(:),{:},[:],<:>

" No annoying sound on errors
set noerrorbells

" no visualbell
set novisualbell

" Add a bit extra margin to the left
set foldcolumn=1

"在处理未保存或只读文件的时候，弹出确认
set confirm

"设置光标高亮显示
"set cursorline
"set cursorcolumn

"光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3 

" Always show the status line
set laststatus=2
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}:%{&fenc!=''?&fenc:&enc}]\ [TYPE=%Y]\ [ROW=%03l/%L(%p%%)]\ [COL=%03v]

"Set utf8 as standard encoding 
set encoding=utf-8
set termencoding=utf-8
"set termencoding=gb2312
set langmenu=zh_CN.UTF-8
set fileencoding=utf-8
"set fileencoding=gb2312
"cp936 = gb2312
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" Use spaces instead of tabs, 1 tab == 4 spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab

" Linebreak on 100 characters
set lbr
set textwidth=100
set formatoptions+=qrnlt

"自动换行
set wrap
set autoindent
set smartindent 

"字符间插入的像素数目
set linespace=0

"增强模式中的命令行自动完成操作
set wildmenu

" Remember info about open buffers on close
set viminfo^=%

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set noswapfile

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal! g`\"" |
			\ endif

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

map <left> <ESC>:NERDTreeToggle<RETURN>
map <right> <ESC>:Tlist<RETURN>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

map <F12> ggVGg?
map <F4> :!ctags -R --languages=c,c++ --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q <cr>


" Smart way to move between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm


"*****************************************************  
"                                                    *
"       tags配置                                     *  
"                                                    *
"*****************************************************  
"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --if0=yes --languages=c,c++ --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q -R -f ~/.vim/systags /usr/include /usr/local/include

"//;不可省略 表示当前目录不存在tags，则在父目录中寻找
set tags=tags; 
set tags+=/root/.vim/systags
set tags+=/root/.vim/cpptags/cpptags
set path+=/root/yanwf/svn/gapnet/gapnet_v3.0/base,/root/yanwf/svn/gapnet/gapnet_v3.0/interface
"*****************************************************  
"                                                    *
"       Cscope配置                                   *  
"                                                    *
"*****************************************************  
if has("cscope")
	set csprg=/usr/bin/cscope " 指定用来执行cscope的命令
	set csto=1 " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
	set cst " 同时搜索cscope数据库和标签文件
    set cscopequickfix=s-,c-,d-,i-,t-,e-,a- " 使用QuickFix窗口来显示cscope查找结果
	set nocsverb
	if filereadable("cscope.out") " 若当前目录下存在cscope数据库，添加该数据库到vim
		cs add cscope.out
	elseif $CSCOPE_DB != "" " 否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim
		cs add $CSCOPE_DB
	endif
	set csverb
endif

nmap <leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <leader>a :cs find a <C-R>=expand("<cword>")<CR><CR>


nmap <leader>hs :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>hg :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>hc :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ht :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>he :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>hf :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>hi :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>hd :scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ha :scs find a <C-R>=expand("<cword>")<CR><CR>



nmap <leader>vs :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vg :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vc :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vt :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ve :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>vf :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>vi :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>vd :vert scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <leader>va :vert scs find a <C-R>=expand("<cword>")<CR><CR>


"*****************************************************  
"                                                    *
"       NERDCommenter配置                            * 
"                                                    *
"*****************************************************  
"<leader>cc 注释当前选中文本
"<leader>cu 取消选中文本块的注释。
"<leader>cm 只用一组符号注释
"<leader>cA 在行尾添加注释
"<leader>c$ /* 注释 */
"<leader>cs /* 块注释 */
"<leader>cy 注释并复制
"<leader>c<space> 注释/取消注释
"<leader>ca 切换　// 和 /* */
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCustomDelimiters = {
            \ 'javascript': { 'left': '//', 'leftAlt': '/**', 'rightAlt': '*/' },
            \ 'less': { 'left': '/**', 'right': '*/' }
        \ }

"*****************************************************  
"                                                    *
"      The-NERD-tree配置                             *  
"                                                    *
"*****************************************************  
nmap <leader>nt :NERDTreeToggle<cr>
let NERDTreeChDirMode=2
let NERDTreeWinSize=35
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeHighlightCursorline=1
let NERDTreeWinPos="left"
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\~$', '\.swp$']

let g:NERDTreeShowIgnoredStatus = 1
let g:nerdtree_tabs_open_on_console_startup=1
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


"*****************************************************  
"                                                    *
"       taglist配置                                  *  
"                                                    *
"*****************************************************  
"<leader>tl 打开taglist窗口
nmap <leader>tl :Tlist<CR><c-l>                
let Tlist_Ctags_Cmd="ctags"
let Tlist_Show_One_File        = 1             " 只显示当前文件的tags
let Tlist_File_Fold_Auto_Close = 1             " 非当前文件，自动折叠
let Tlist_Use_Right_Window     = 1             " 在右侧窗口中显示
let Tlist_Sort_Type = "name"                  "tems in tags sorted by name 
let Tlist_Exit_OnlyWindow      = 1             " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Process_File_Always  = 1             "实时更新tags
let Tlist_Inc_Winwidth = 0                     "terminal/console mode
let Tlist_Show_Menu=1
let Tlist_Use_SingleClick=0
let Tlist_Process_File_Always=1
let Tlist_GainFocus_On_ToggleOpen = 1

"*****************************************************  
"                                                    *
"       tagbar配置                                   *  
"                                                    *
"*****************************************************  
"<leader>tb 打开tagbar窗口
nmap <leader>tb :TagbarToggle<CR>  
let g:tarbar_width=35
let g:tagbar_autofocus = 1

"*****************************************************  
"                                                    *
"       a.vim配置                                    *  
"                                                    *
"*****************************************************  
"切换源文件头文件 a.vim
":A 在同一tab切换源文件/头文件
":AV 竖向切割窗口,打开对应的源文件/头文件
":AS 横向切割窗口,打开对应的源文件/头文件

"*****************************************************  
"                                                    *
"       echofunc配置                                 *  
"                                                    *
"*****************************************************  
let g:EchoFuncKeyNext='<leader>n'
let g:EchoFuncKeyPrev='<leader>p'
let g:EchoFuncAutoStartBalloonDeclaration = 1


"*****************************************************  
"                                                    *
"        omnicppcomplete配置                         *  
"                                                    *
"*****************************************************  
set completeopt=menu,menuone,longest
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_NamespaceSearch = 0 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_DisplayMode=1 " Class scope completion mode: always show all members
let OmniCpp_ShowScopeInAbbr=1 " show scope in abbreviation and remove the last column
let OmniCpp_DefaultNamespaces = ["std", "gapnet"]

"*****************************************************  
"                                                    *
"        neocomplete配置                             *
"                                                    *
"*****************************************************  
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


"*****************************************************  
"                                                    *
"        vim-airline                                     *  
"                                                    *
"*****************************************************  
let g:airline_theme='papercolor'



"*****************************************************  
"                                                    *
"   vim-instant-markdown                             *  
"                                                    *
"*****************************************************  

let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0
":InstantMarkdownPreview

