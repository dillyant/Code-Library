
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fkLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


"*****************************************************
"                                                    *
"       general配置                                  *
"                                                    *
"*****************************************************
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" If "mapleader" is not set or empty, a backslash is used  instead.
let mapleader = ","
let g:mapleader = ","

set t_Co=256

set ttymouse=xterm2
" Switch syntax highlighting on, when the terminal has colors
syntax enable

"允许未保存切换buffer 隐藏buff
set hidden

"可以在buffer的任何地方使用鼠标
"set mouse=a
"set selection=exclusive
"set selectmode=mouse,key

"复制之前的缩进
set copyindent

"Threshold for reporting number of lines changed
set report=0

" Set to auto read when a file is changed from the outside
set autoread

"Write the contents of the file, if it has been modified
set autowrite

"显示行号
set number
"set relativenumber

set ttyfast

"历史记录数
set history=1000

"Always show current position
set ruler

"show (partial) command keys in the status line
set showcmd

"Height of the command bar
set cmdheight=2

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=b,s,<,>,[,],h,l

"带有如下符号的单词不要换行分割
set iskeyword+=$,@,%,#

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

"匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1

"匹配括号的规则，增加针对html的<>
set matchpairs=(:),{:},[:],<:>

" No annoying sound on errors
set noerrorbells

" no visualbell
set novisualbell

" Add a bit extra margin to the left
set foldcolumn=1

"在处理未保存或只读文件的时候，弹出确认
set confirm

"设置光标高亮显示
"set cursorline
"set cursorcolumn

"光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3

" Always show the status line
set laststatus=2
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}:%{&fenc!=''?&fenc:&enc}]\ [TYPE=%Y]\ [ROW=%03l/%L(%p%%)]\ [COL=%03v]

"Set utf8 as standard encoding
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
"gb2312
"set termencoding=gb2312
"set fileencoding=gb2312
"cp936 = gb2312
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" Use spaces instead of tabs, 1 tab == 4 spaces
"set smarttab
"set expandtab

set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround

"自动换行
set wrap
set cindent
set autoindent
set smartindent

"字符间插入的像素数目
set linespace=0

"增强模式中的命令行自动完成操作
set wildmenu

" Remember info about open buffers on close
set viminfo^=%

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set noswapfile

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal! g`\"" |
			\ endif

" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" 快速保存
inoremap jk <esc>:w<cr>

" 快速缩进
vnoremap < <gv
vnoremap > >gv

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

"ROT13 encrypt
map <F12> ggVGg?


" Remove the Windows ^M - when the encodings gets messed up
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm


"*****************************************************
"                                                    *
"       vim-plug配置                                 *
"                                                    *
"*****************************************************

call plug#begin('~/.vim/plugged')

"配色方案
Plug 'morhetz/gruvbox'
Plug 'flazz/vim-colorschemes'

"显示函数原型
"Plug 'vim-scripts/echofunc.vim'

"文本对象组合使用能让更改成对的符号异常方便
"Plug 'tpope/vim-surround'

"markdown
"Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

"代码模板
Plug 'vim-scripts/c.vim'
"Plug 'SirVer/ultisnips'

"符号列表
Plug 'vim-scripts/taglist.vim'
Plug 'vim-scripts/Tagbar'

"头文件和源文件跳转
Plug 'vim-scripts/a.vim'

"模糊查找
"Plug 'Yggdroot/LeaderF'

"状态栏
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'Lokaltog/vim-powerline'

"代码高亮
Plug 'octol/vim-cpp-enhanced-highlight'

"代码注释
"Plug 'scrooloose/nerdcommenter'

"补全
Plug 'vim-scripts/OmniCppComplete'
"Plug 'ycm-core/YouCompleteMe'
"Plug 'Raimondi/delimitMate'

"树形目录
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs'
"Plug 'fholgado/minibufexpl.vim'

"版本控制
"Plug 'mhinz/vim-signify'
"Plug 'Xuyuanp/nerdtree-git-plugin'

"代码检测
"Plug 'dense-analysis/ale'

"快速跳转
"Plug 'justinmk/vim-sneak'

"多光标
"Plug 'terryma/vim-multiple-cursors'

"tags管理
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
Plug 'skywind3000/vim-preview'

"格式化
"Plug 'godlygeek/tabular'
"Plug 'junegunn/vim-easy-align'
Plug 'Chiel92/vim-autoformat'

call plug#end()




"*****************************************************
"                                                    *
"       colorscheme配置                                     *
"                                                    *
"*****************************************************
"colorscheme atom
colorscheme molokai
"colorscheme luna-term
"
"colorscheme gruvbox
"let g:gruvbox_contrast_light="light"
"let g:gruvbox_contrast_dark="hard"
"let g:gruvbox_improved_warnings=1


"*****************************************************
"                                                    *
"       tags配置                                     *
"                                                    *
"*****************************************************
"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --if0=yes --languages=c,c++ --c-kinds=+p --c++-kinds=+p --fields=+iaS --extras=+q -R -f ~/.vim/systags /usr/include /usr/local/include

"//;不可省略 表示当前目录不存在tags，则在父目录中寻找
set tags=tags;
set tags+=/root/.vim/systags
set path+=/usr/include,/usr/local/include/

"map <F4> :!ctags -R --languages=c,c++ --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q <cr>

"*****************************************************
"                                                    *
"       Cscope配置                                   *
"                                                    *
"*****************************************************
if has("cscope")
	"set csprg=/usr/bin/cscope " 指定用来执行cscope的命令
	set csprg=/usr/bin/gtags-cscope " 指定用来执行cscope的命令
	set csto=1 " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
	set cst " 同时搜索cscope数据库和标签文件
	set cscopequickfix=s-,c-,d-,i-,t-,e-,a- " 使用QuickFix窗口来显示cscope查找结果
endif

"*****************************************************
"                                                    *
"       NERDCommenter配置                            *
"                                                    *
"*****************************************************
"<leader>cc 注释当前选中文本
"<leader>cu 取消选中文本块的注释。
"<leader>cm 只用一组符号注释
"<leader>cA 在行尾添加注释
"<leader>c$ /* 注释 */
"<leader>cs /* 块注释 */
"<leader>cy 注释并复制
"<leader>c<space> 注释/取消注释
"<leader>ca 切换　// 和 /* */
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCustomDelimiters = {
			\ 'javascript': { 'left': '//', 'leftAlt': '/**', 'rightAlt': '*/' },
			\ 'less': { 'left': '/**', 'right': '*/' }
			\ }

"*****************************************************
"                                                    *
"    scrooloose/nerdtree                             *
"                                                    *
"*****************************************************
nmap <leader>nt :NERDTreeToggle<cr>
map <left> <ESC>:NERDTreeToggle<RETURN>
let NERDTreeChDirMode=2
let NERDTreeWinSize=35
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeHighlightCursorline=1
let NERDTreeWinPos="left"
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\~$', '\.swp$']

let g:NERDTreeShowIgnoredStatus = 1
let g:nerdtree_tabs_open_on_console_startup=1
let g:NERDTreeIndicatorMapCustom = {
			\ "Modified"  : "✹",
			\ "Staged"    : "✚",
			\ "Untracked" : "✭",
			\ "Renamed"   : "➜",
			\ "Unmerged"  : "═",
			\ "Deleted"   : "✖",
			\ "Dirty"     : "✗",
			\ "Clean"     : "✔︎",
			\ 'Ignored'   : '☒',
			\ "Unknown"   : "?"
			\ }


"*****************************************************
"                                                    *
"       taglist配置                                  *
"                                                    *
"*****************************************************
nmap <leader>tl :Tlist<CR><c-l>
map <right> <ESC>:Tlist<RETURN>
let Tlist_Ctags_Cmd="ctags"
let Tlist_Show_One_File        = 1             " 只显示当前文件的tags
let Tlist_File_Fold_Auto_Close = 1             " 非当前文件，自动折叠
let Tlist_Use_Right_Window     = 1             " 在右侧窗口中显示
let Tlist_Sort_Type = "name"                  "tems in tags sorted by name
let Tlist_Exit_OnlyWindow      = 1             " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Process_File_Always  = 1             "实时更新tags
let Tlist_Inc_Winwidth = 0                     "terminal/console mode
let Tlist_Show_Menu=1
let Tlist_Use_SingleClick=0
let Tlist_Process_File_Always=1
let Tlist_GainFocus_On_ToggleOpen = 1

"*****************************************************
"                                                    *
"       tagbar配置                                   *
"                                                    *
"*****************************************************
"<leader>tb 打开tagbar窗口
nmap <leader>tb :TagbarToggle<CR>
let g:tarbar_width=35
let g:tagbar_autofocus = 1

"*****************************************************
"                                                    *
"       a.vim配置                                    *
"                                                    *
"*****************************************************
"切换源文件头文件 a.vim
":A 在同一tab切换源文件/头文件
":AV 竖向切割窗口,打开对应的源文件/头文件
":AS 横向切割窗口,打开对应的源文件/头文件

"*****************************************************
"                                                    *
"       echofunc配置                                 *
"                                                    *
"*****************************************************
let g:EchoFuncKeyNext='<leader>n'
let g:EchoFuncKeyPrev='<leader>p'
let g:EchoFuncAutoStartBalloonDeclaration = 1


"*****************************************************
"                                                    *
"        omnicppcomplete配置                         *
"                                                    *
"*****************************************************
set completeopt=menuone,menu,longest
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_NamespaceSearch = 0 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_DisplayMode=1 " Class scope completion mode: always show all members
let OmniCpp_ShowScopeInAbbr=1 " show scope in abbreviation and remove the last column
let OmniCpp_DefaultNamespaces = ["std", "gapnet"]


"*****************************************************
"                                                    *
"        vim-airline                                     *
"                                                    *
"*****************************************************
"let g:airline_theme='papercolor'
"let g:airline_theme="ravenpower"
"let g:airline_theme="minimalist"
let g:airline_theme="kolor"
" let g:airline_theme="jellybeans"
" let g:airline_theme="distinguished"
" let g:airline_theme="base16_google"
" let g:airline_theme="behelit"
"


"*****************************************************
"                                                    *
"   vim-instant-markdown                             *
"                                                    *
"*****************************************************

let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0


"*****************************************************
"                                                    *
"  tabular                                           *
"                                                    *
"*****************************************************
" 冒号对齐：:Tab /:
" 逗号对齐 :Tabularize /,
" 运行上一个对齐命令 :Tab
" // 对齐（需要 escape）: :Tab /\/\/

"*****************************************************
"                                                    *
"  vim-easy-align                                    *
"                                                    *
"*****************************************************
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"*****************************************************
"                                                    *
"  dense-analysis/ale								 *
"                                                    *
"*****************************************************
" 对应语言需要安装相应的检查工具
"    let g:ale_linters_explicit = 1 "除g:ale_linters指定，其他不可用
"    let g:ale_linters = {
"\   'cpp': ['cppcheck','clang','gcc'],
"\   'c': ['cppcheck','clang', 'gcc'],
"\   'python': ['pylint'],
"\   'bash': ['shellcheck'],
"\   'go': ['golint'],
"\}
"
let g:ale_sign_column_always = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1
"let g:ale_set_quickfix = 1
"let g:ale_open_list = 1"打开quitfix对话框

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

let g:ale_sign_error = ">>"
let g:ale_sign_warning = "--"

"*****************************************************
"                                                    *
" vim-gutentags                                      *
"                                                    *
"*****************************************************
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
	silent! call mkdir(s:vim_tags, 'p')
endif
"在项目根目录 touch 一个空的名为 .root 的文件
" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1

"预览 quickfix 窗口 ctrl-w z 关闭
"往上滚动预览窗口
noremap <Leader>u :PreviewScroll -1<cr>
"往下滚动预览窗口
noremap <leader>d :PreviewScroll +1<cr>
"打开预览窗口
autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>

"*****************************************************
"                                                    *
" Yggdroot/LeaderF									 *
"                                                    *
"*****************************************************
" Ctrl + p 打开文件搜索
let g:Lf_ShortcutF = '<c-f>'
" 打开函数列表
noremap <leader>lf :LeaderfFunction<cr>


"*****************************************************
"                                                    *
" vim-autoformat                                     *
"                                                    *
"*****************************************************

noremap <leader>af :Autoformat<CR>:w<CR>
"写入时自动格式化
"au BufWrite * :Autoformat

"debug mode
let g:autoformat_verbosemode=1
let g:formatters_cpp = ['my_custom_cpp']
let g:formatdef_my_custom_cpp = '"astyle --mode=c --style=kr -T4 -N -U -y -p -xg -H -k3 -j -xb -m0 -M40 -n -xC100\<CR>"'


"*****************************************************
"                                                    *
" YouCompleteMe                                      *
"                                                    *
"*****************************************************
"let g:ycm_use_clangd = 0
"let g:ycm_global_ycm_extra_conf ='~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
"let g:ycm_confirm_extra_conf = 0
"let g:ycm_seed_identifiers_with_syntax=1
"let g:ycm_error_symbol = 'E>'
"let g:ycm_warning_symbol = 'W>'
"let g:ycm_collect_identifiers_from_comments_and_strings = 1 "注释与字符串中的内容也用于补全
"let g:ycm_complete_in_comments = 1                          "在注释输入中也能补全
"let g:ycm_complete_in_strings = 1                           "在字符串输入中也能补全
"let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  "映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.
"let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
"let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查
"
"let g:ycm_semantic_triggers =  {
"      \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
"      \ 'cs,lua,javascript': ['re!\w{2}'],
"      \}
"
""回车即选中当前项
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif
""****************************************************
"                                                    *
"octol/vim-cpp-enhanced-highlight                    *
"                                                    *
"*****************************************************
"let g:cpp_class_scope_highlight = 1
"let g:cpp_member_variable_highlight = 1
"let g:cpp_concepts_highlight = 1
"let g:cpp_experimental_simple_template_highlight = 1
" 文件较大时使用下面的设置高亮模板速度较快，但会有一些小错误
" let g:cpp_experimental_template_highlight = 1


""****************************************************
"                                                    *
" UltiSnips                                          *
"                                                    *
"*****************************************************
"let g:UltiSnipsExpandTrigger="<C-j>"
"let g:UltiSnipsListSnippets="<C-e>"
"let g:UltiSnipsJumpForwardTrigger="<C-j>"
"let g:UltiSnipsJumpBackwardTrgger="<C-k>"

